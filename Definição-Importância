# Defini√ß√£o e Import√¢ncia das Estruturas de Dados no Desenvolvimento

## 1. Diferen√ßa entre Estruturas de Dados Lineares e N√£o Lineares

### Estruturas de Dados Lineares  
As estruturas **lineares** organizam os dados de forma sequencial, onde cada elemento tem um sucessor e/ou antecessor direto.

**Exemplos:**  
- **Arrays (Listas em Python)** ‚Üí `lista = [1, 2, 3, 4]`
- **Filas (Queue)** ‚Üí FIFO (*First In, First Out*)
- **Pilhas (Stack)** ‚Üí LIFO (*Last In, First Out*)
- **Listas Encadeadas (Linked List)** ‚Üí Cada n√≥ aponta para o pr√≥ximo

**Uso comum:** Quando a ordem dos elementos √© importante, como buffers de mensagens ou hist√≥rico de p√°ginas visitadas.

---

### Estruturas de Dados N√£o Lineares  
Aqui, os dados n√£o seguem uma sequ√™ncia √∫nica. Os elementos podem estar ligados de v√°rias formas, formando estruturas mais complexas.

**Exemplos:**  
- **√Årvores (Tree)** ‚Üí Usadas em sistemas de arquivos e bancos de dados
- **Grafos (Graph)** ‚Üí Modelam redes sociais e mapas de rotas
- **Tabelas Hash (Hash Tables)** ‚Üí Mapeiam chaves para valores com busca eficiente

**Uso comum:** Quando h√° necessidade de representa√ß√µes complexas, como redes e hierarquias.

---

## 2. Impacto das Estruturas de Dados no Desempenho

As estruturas de dados s√£o fundamentais para o desempenho dos programas. A escolha correta pode tornar o c√≥digo muito mais eficiente.

### Compara√ß√£o de desempenho  
Um c√≥digo sem estrutura de dados eficiente pode ser muito mais lento. Exemplo:

- **Sem estrutura adequada:** Listas percorridas manualmente para buscas.
- **Com estrutura adequada:** Uso de dicion√°rios (tabelas hash) para buscas r√°pidas.

### Impacto no desempenho  
- **Tempo de Execu√ß√£o:** Algoritmos eficientes podem reduzir tempo de processamento.
- **Uso de Mem√≥ria:** Algumas estruturas armazenam dados de forma mais compacta.

üöÄ **Exemplo pr√°tico:** Veja o c√≥digo [`desempenho.py`](./desempenho.py) neste reposit√≥rio.
